const User = require("../models/User");
const Role = require("../models/Role"); 
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const crypto = require("crypto");
const { body, validationResult } = require("express-validator");
const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client('786381256762-26ds2r2qbeus4ekb31nmsf3ji52hosj2.apps.googleusercontent.com');

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
  const { name, email, phone, password } = req.body;

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
    // const existingPhone = await User.findOne({ phone });
    // if (existingPhone) {
    //   return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    // }

    const userRole = await Role.findOne({ role: "customer" });
    if (!userRole) {
      return res.status(400).json({ message: "Role kh√¥ng h·ª£p l·ªá" });
    }

    // T·∫°o token x√°c minh email
    const verificationToken = crypto.randomBytes(32).toString("hex");

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      phone,
      password,
      role: userRole._id,
      verificationToken,  
      isVerified: false,  
    });

    await newUser.save();

    // Link x√°c nh·∫≠n email
    const verifyUrl = `http://localhost:3000/verify-email/${verificationToken}`;

    // C·∫•u h√¨nh transporter g·ª≠i email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL, // Email c·ªßa b·∫°n
        pass: process.env.EMAIL_PASSWORD, // M·∫≠t kh·∫©u ·ª©ng d·ª•ng (App password)
      },
    });

    // N·ªôi dung email
    const mailOptions = {
      from: `"GearUp Support" <${process.env.EMAIL}>`,
      to: email,
      subject: "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n",
      html: `<p>Xin ch√†o <b>${name}</b>,</p>
             <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n.</p>
             <p>Vui l√≤ng nh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ x√°c nh·∫≠n email c·ªßa b·∫°n:</p>
             <a href="${verifyUrl}"><b>X√°c nh·∫≠n email</b></a>
             <p>Tr√¢n tr·ªçng,</p>
             <p>ƒê·ªôi ng≈© h·ªó tr·ª£</p>`,
    };

    // G·ª≠i email
    try {
      await transporter.sendMail(mailOptions);
      console.log("Email x√°c nh·∫≠n ƒë√£ g·ª≠i th√†nh c√¥ng t·ªõi:", email);
      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n." });
    } catch (error) {
      console.error("L·ªói g·ª≠i email:", error);
      res.status(500).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n." });
    }
  } catch (err) {
    console.error("L·ªói khi ƒëƒÉng k√Ω:", err);
    res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

// X√°c minh email
exports.verifyEmail = async (req, res) => {
  try {
    const { token } = req.params;
    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    user.isVerified = true;
    user.verificationToken = undefined; // X√≥a token sau khi x√°c minh
    await user.save();

    res.json({ message: "X√°c minh email th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p" });
  } catch (error) {
    console.error("L·ªói x√°c minh email:", error);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i" });
  }
};

// ƒêƒÉng nh·∫≠p
exports.login = [
  // Validate email v√† m·∫≠t kh·∫©u
  body("email").isEmail().withMessage("Email kh√¥ng h·ª£p l·ªá"),
  body("password").isLength({ min: 6 }).withMessage("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"),

  async (req, res) => {
    // Ki·ªÉm tra l·ªói validate
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    try {
      // S·ª≠ d·ª•ng populate("role") ƒë·ªÉ l·∫•y th√¥ng tin vai tr√≤ ƒë·∫ßy ƒë·ªß
      const user = await User.findOne({ email }).populate("role");

      if (!user) {
        return res.status(404).json({ message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
      }

      if (!user.isVerified) {
        return res.status(403).json({ message: "T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c x√°c minh. Vui l√≤ng x√°c minh email c·ªßa b·∫°n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p." });
      }

      if (user.password !== password) {
        return res.status(400).json({ message: "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
      }
      if (user.isBanned) {
        return res.status(403).json({ message: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£." });
      }
      // T·∫°o JWT token n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      const token = jwt.sign(
        { _id: user._id.toString(), email: user.email, role: user.role.role },
        process.env.JWT_SECRET,
        { expiresIn: "1d" }
      );
      
      console.log("üîë JWT_SECRET khi t·∫°o token:", process.env.JWT_SECRET);
      console.log("‚úÖ Token m·ªõi t·∫°o:", token);
      
      res.status(200).json({
        token,
        user: {
          _id: user._id,
          name: user.name,
          email: user.email,
          role: user.role,
          phone: user.phone,
          address: user.address,
          image: user.image || "https://example.com/default-avatar.png",
          isVerified: user.isVerified 
        },
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  },
];

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
exports.getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-password");
    if (!user) return res.status(404).json({ message: "User not found" });

    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Thay ƒë·ªïi m·∫≠t kh·∫©u
exports.changePassword = async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  try {
    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ message: "User not found" });

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© (so s√°nh tr·ª±c ti·∫øp v√¨ kh√¥ng d√πng bcrypt)
    if (user.password !== oldPassword) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ h·ª£p l·ªá kh√¥ng
    if (newPassword.length < 6) {
      return res.status(400).json({ message: "New password must be at least 6 characters long" });
    }

    user.password = newPassword;
    await user.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ƒêƒÉng xu·∫•t
exports.logout = async (req, res) => {
  try {
    // Ki·ªÉm tra token h·∫øt h·∫°n
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(200).json({ message: "Logged out successfully" });
    }

    try {
      jwt.verify(token, process.env.JWT_SECRET);
    } catch (error) {
      // Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
      return res.status(401).json({ message: "Token expired or invalid" });
    }

    res.status(200).json({ message: "Logged out successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// G·ª≠i y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u
exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  
  try {
    const user = await User.findOne({ email });
  
    if (!user) {
      return res.status(200).json({
        message: "N·∫øu email h·ª£p l·ªá, ch√∫ng t√¥i s·∫Ω g·ª≠i m·ªôt li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.",
      });
    }
  
    // T·∫°o token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    const resetToken = crypto.randomBytes(20).toString("hex");
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpire = Date.now() + 15 * 60 * 1000;
    await user.save();
  
    // Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    const resetUrl = `http://localhost:3000/reset-password/${resetToken}`;
    const message = `B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: \n\n ${resetUrl}`;
  
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL,
        pass: process.env.EMAIL_PASSWORD,
      },
    });
  
    await transporter.sendMail({
      from: `"GearUp Support" <${process.env.EMAIL}>`,
      to: user.email,
      subject: "Password Reset Request",
      text: message,
    });
  
    res.status(200).json({
      message: "N·∫øu email h·ª£p l·ªá, ch√∫ng t√¥i ƒë√£ g·ª≠i m·ªôt li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.",
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};
  
// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (req, res) => {
  const { token } = req.params;
  const { newPassword } = req.body;
  
  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpire: { $gt: Date.now() },
    });
  
    if (!user) return res.status(400).json({ message: "Invalid or expired token" });
  
    user.password = newPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();
  
    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng khi ƒë√£ ƒëƒÉng nh·∫≠p (profile)
exports.getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select("-password");
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUserProfile = async (req, res) => {
  const { name, address, image, phone } = req.body;
  const user = await User.findById(req.user._id);

  if (!user) {
    return res.status(404).json({ message: "User not found" });
  }

  // Validate t√™n
  if (name) {
    if (name.trim() === '') {
      return res.status(400).json({ 
        message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" 
      });
    }

    // Ki·ªÉm tra t√™n ch·ªâ ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng
    const nameRegex = /^[A-Za-z√Ä-·ªπ\s]+$/;
    if (!nameRegex.test(name.trim())) {
      return res.status(400).json({ 
        message: "T√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng" 
      });
    }
  }

  // Validate s·ªë ƒëi·ªán tho·∫°i: b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ ƒë·ªß 10 ch·ªØ s·ªë
  if (phone) {
    const phoneRegex = /^0\d{9}$/;
    if (!phoneRegex.test(phone)) {
      return res.status(400).json({ 
        message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ 10 s·ªë" 
      });
    }
  }

  if (name) user.name = name.trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
  if (address) user.address = address;
  if (image) user.image = image;
  if (phone) user.phone = phone;

  await user.save();
  res.json({ 
    message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng", 
    user 
  });
};

exports.blockUser = async (req, res) => {
  const { userId } = req.params;
  // T·ª´ frontend v·∫´n g·ª≠i isBlocked, backend chuy·ªÉn ƒë·ªïi th√†nh isBanned
  const { isBlocked } = req.body;
  try {
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    user.isBanned = isBlocked;
    await user.save();
    res.status(200).json({ message: `User ƒë√£ ƒë∆∞·ª£c ${isBlocked ? 'block' : 'unblock'} th√†nh c√¥ng` });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// C·∫≠p nh·∫≠t role cho user
exports.updateUserRole = async (req, res) => {
  const { userId } = req.params;
  const { newRole } = req.body;

  try {
    const role = await Role.findOne({ role: newRole });
    if (!role) return res.status(400).json({ message: "Role kh√¥ng h·ª£p l·ªá" });

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { role: role._id },
      { new: true }  // L·∫•y v·ªÅ document sau khi update
    ).populate("role");

    if (!updatedUser) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json({ message: "Role c·ªßa user ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", user: updatedUser });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.googleLogin = async (req, res) => {
  const { idToken } = req.body;
  try {
    const ticket = await client.verifyIdToken({
      idToken,
      audience: '786381256762-26ds2r2qbeus4ekb31nmsf3ji52hosj2.apps.googleusercontent.com',
    });
    const payload = ticket.getPayload();
    const { email, name, picture, sub: googleId } = payload;

    // T√¨m user theo email
    let user = await User.findOne({ email }).populate("role");
    
    if (!user) {
      // N·∫øu user ch∆∞a t·ªìn t·∫°i, t·∫°o user m·ªõi
      const userRole = await Role.findOne({ role: "customer" });
      if (!userRole) {
        return res.status(400).json({ message: "Role kh√¥ng h·ª£p l·ªá" });
      }

      // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n cho t√†i kho·∫£n Google
      const randomPassword = crypto.randomBytes(16).toString('hex');

      // T·∫°o user m·ªõi v·ªõi th√¥ng tin t·ª´ Google
      user = new User({
        name,
        email,
        googleId,
        password: randomPassword, // Th√™m m·∫≠t kh·∫©u ng·∫´u nhi√™n
        role: userRole._id,
        isVerified: true,
        image: picture || "https://example.com/default-avatar.png",
        loginType: 'google' // Th√™m tr∆∞·ªùng ƒë·ªÉ ƒë√°nh d·∫•u ƒë√¢y l√† t√†i kho·∫£n Google
      });

      await user.save();
      // Populate role sau khi save
      user = await User.findById(user._id).populate("role");
    }

    // T·∫°o JWT token
    const token = jwt.sign(
      { _id: user._id.toString(), email: user.email, role: user.role.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    // Tr·∫£ v·ªÅ response
    res.status(200).json({
      token,
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone,
        address: user.address,
        image: user.image,
        isVerified: user.isVerified
      },
    });
  } catch (error) {
    console.error("Google Login Error:", error);
    res.status(500).json({ message: "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i." });
  }
};