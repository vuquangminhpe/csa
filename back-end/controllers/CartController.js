const Cart = require("../models/Cart");
const Product = require("../models/Product");
const mongoose = require("mongoose");

// L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
exports.getCart = async (req, res) => {
    try {
        console.log(`üìå Nh·∫≠n request l·∫•y gi·ªè h√†ng t·ª´ user_id: ${req.user.id}`);

        const cart = await Cart.findOne({ customer_id: req.user.id })
            .populate({
                path: "items.product_id",
                populate: {
                    path: "category_id",
                    select: "name sub_categories"
                }
            })
            .lean();

        if (!cart || !cart.items || cart.items.length === 0) {
            console.warn(`‚ö†Ô∏è [Warning] Gi·ªè h√†ng tr·ªëng cho user_id: ${req.user.id}`);
            return res.status(200).json({ message: "Gi·ªè h√†ng tr·ªëng", items: [] });
        }

        // üîπ Map qua t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ l·∫•y ƒë√∫ng bi·∫øn th·ªÉ ƒë√£ ch·ªçn
        const formattedCart = cart.items.map((item) => {
            const product = item.product_id;
            if (!product) return null;

            // üîç T√¨m bi·∫øn th·ªÉ ph√π h·ª£p trong m·∫£ng variants
            const selectedVariant = product.variants.find(v => v.price === item.price);

            // üîç T√¨m t√™n sub-category v√† brand t·ª´ category_id
            const category = product.category_id;
            const brandId = product.brand; // ƒê√¢y l√† string ID c·ªßa brand
            const brandInfo = category?.sub_categories?.find(sub => 
                sub._id.toString() === brandId?.toString()
            );

            return {
                _id: item._id,
                product_id: product._id,
                name: product.name,
                brand: brandInfo?.name || "Ch∆∞a c√≥ th∆∞∆°ng hi·ªáu",
                category_name: category?.name || "Kh√¥ng x√°c ƒë·ªãnh",
                image: product.images.length > 0 ? product.images[0] : "",
                price: item.price,
                quantity: item.quantity,
                color: item.color || product.colors[0],
                variant: selectedVariant || {},
                total: item.quantity * item.price
            };
        }).filter(item => item !== null);

        res.status(200).json({ items: formattedCart });
    } catch (error) {
        console.error(`‚ùå [Error] L·ªói khi l·∫•y gi·ªè h√†ng cho user_id: ${req.user.id}`, error);
        res.status(500).json({ message: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i." });
    }
};




// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
exports.addToCart = async (req, res) => {
    try {
        const { product_id, quantity, variant_index, selected_color } = req.body;
        const product = await Product.findById(product_id);

        if (!product) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }

        if (!product.variants || product.variants.length === 0) {
            return res.status(400).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ" });
        }

        const variant = product.variants[variant_index || 0]; // L·∫•y ƒë√∫ng bi·∫øn th·ªÉ

        if (!variant) {
            return res.status(400).json({ message: "Bi·∫øn th·ªÉ s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        let cart = await Cart.findOne({ customer_id: req.user.id });

        if (!cart) {
            cart = new Cart({ customer_id: req.user.id, items: [] });
        }

        // üî• Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o kh√¥ng c√≥ name kh√¥ng
        cart.items = cart.items.map(item => {
            if (!item.name) {
                item.name = "Unknown"; // C√°ch kh·∫Øc ph·ª•c t·∫°m th·ªùi n·∫øu d·ªØ li·ªáu b·ªã l·ªói
            }
            return item;
        });

        // S·ª≠ d·ª•ng m√†u s·∫Øc ƒë∆∞·ª£c ch·ªçn ho·∫∑c m√†u m·∫∑c ƒë·ªãnh
        const color = selected_color || (product.colors && product.colors.length > 0 ? product.colors[0] : null);

        const existingItem = cart.items.find(item => 
            item.product_id.equals(product_id) && 
            item.price === variant.price && 
            item.color === color
        );

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            const cartItem = {
                product_id: product._id,
                name: product.name,  // ‚úÖ Ch·∫Øc ch·∫Øn `name` c√≥ d·ªØ li·ªáu
                price: variant.price,
                quantity: quantity || 1,
                image: product.images.length > 0 ? product.images[0] : "",
                color: color  // ‚úÖ L∆∞u m√†u s·∫Øc ƒë∆∞·ª£c ch·ªçn
            };

            cart.items.push(cartItem);
        }

        await cart.save();
        res.json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng", cart });
    } catch (error) {
        console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        res.status(500).json({ message: error.message });
    }
};






// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
exports.updateCartItem = async (req, res) => {
    try {
        const { product_id, quantity } = req.body;
        let cart = await Cart.findOne({ customer_id: req.user.id });

        if (!cart) return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

        // T√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
        const itemIndex = cart.items.findIndex(item => item.product_id.equals(product_id));
        if (itemIndex === -1) return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ database
        const product = await Product.findById(product_id);
        if (!product) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }

        // T√¨m variant ph√π h·ª£p d·ª±a tr√™n gi√°
        const variant = product.variants.find(v => v.price === cart.items[itemIndex].price);
        if (!variant) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m" });
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
        if (quantity > variant.stock) {
            return res.status(400).json({ 
                message: `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${quantity}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng trong kho (${variant.stock})`,
                availableStock: variant.stock
            });
        }

        if (quantity <= 0) {
            // N·∫øu s·ªë l∆∞·ª£ng <= 0, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            cart.items.splice(itemIndex, 1);
        } else {
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            cart.items[itemIndex].quantity = quantity;
        }

        cart.updatedAt = Date.now();
        await cart.save();

        res.json({ 
            message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng", 
            cart,
            availableStock: variant.stock 
        });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};


// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
exports.removeFromCart = async (req, res) => {
    try {
        const { product_id, item_id } = req.body;
        console.log("Removing item:", { product_id, item_id });
        
        let cart = await Cart.findOne({ customer_id: req.user.id });
        if (!cart) return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
        
        const initialLength = cart.items.length;
        let itemRemoved = false;

        // N·∫øu c√≥ item_id, x√≥a theo item_id (ch√≠nh x√°c m·ªôt bi·∫øn th·ªÉ)
        if (item_id) {
            cart.items = cart.items.filter(item => {
                if (item._id.toString() === item_id) {
                    itemRemoved = true;
                    return false;
                }
                return true;
            });
        } else {
            // N·∫øu ch·ªâ c√≥ product_id, x√≥a t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m ƒë√≥
            cart.items = cart.items.filter(item => {
                if (item.product_id.equals(product_id)) {
                    itemRemoved = true;
                    return false;
                }
                return true;
            });
        }

        if (!itemRemoved) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });
        }

        cart.updatedAt = Date.now();
        await cart.save();
        
        res.json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng", cart });
    } catch (error) {
        console.error("Error removing item from cart:", error);
        res.status(500).json({ message: error.message });
    }
};
