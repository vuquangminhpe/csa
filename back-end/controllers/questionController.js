const Question = require("../models/Question");
const Product = require("../models/Product");
const mongoose = require("mongoose");
const User = require("../models/User");
const Notification = require("../models/Notification"); // ‚úÖ S·ª≠a l·∫°i ƒë√∫ng t√™n model

// üìå API: Ng∆∞·ªùi d√πng g·ª≠i c√¢u h·ªèi
exports.askQuestion = async (req, res) => {
  try {
    const { productId, question } = req.body;
    const userId = req.user._id; // L·∫•y ID t·ª´ token

    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "User ID ho·∫∑c Product ID kh√¥ng h·ª£p l·ªá." });
    }

    const newQuestion = new Question({
      user: new mongoose.Types.ObjectId(userId),
      product: new mongoose.Types.ObjectId(productId),
      question,
    });

    await newQuestion.save();
    res.status(201).json({ message: "C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† ƒëang ch·ªù duy·ªát.", question: newQuestion });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi g·ª≠i c√¢u h·ªèi.", error: error.message });
  }
};

// üìå API: L·∫•y danh s√°ch c√¢u h·ªèi c·ªßa s·∫£n ph·∫©m
exports.getQuestionsByProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    console.log('Getting questions for productId:', productId);
    
    // L·ªçc ra nh·ªØng c√¢u h·ªèi ƒë√£ duy·ªát (approved) v√† c√≤n hi·ªÉn th·ªã (isVisible)
    const populatedQuestions = await Question.find({ 
      product: productId,
      isVisible: true,
      status: "approved"
    })
      .populate("user", "name email")
      .populate("answers.sale", "name email")
      .sort({ createdAt: -1 }); // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    
    console.log('Questions after population:', {
      total: populatedQuestions.length,
      statuses: populatedQuestions.map(q => q.status),
      isVisible: populatedQuestions.map(q => q.isVisible)
    });

    res.status(200).json({ questions: populatedQuestions });
  } catch (error) {
    console.error("Error in getQuestionsByProduct:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y c√¢u h·ªèi.", error: error.message });
  }
};


// üìå API: Sale tr·∫£ l·ªùi c√¢u h·ªèi
exports.answerQuestion = async (req, res) => {
  try {
    const { questionId } = req.params;
    const { answer, saleId } = req.body;

    if (!mongoose.Types.ObjectId.isValid(saleId)) {
      return res.status(400).json({ message: "Sale ID kh√¥ng h·ª£p l·ªá." });
    }

    const user = await User.findById(saleId).populate("role", "role");
    if (!user || user.role.role !== "sale") {
      return res.status(403).json({ message: "Ch·ªâ nh√¢n vi√™n Sale m·ªõi c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi." });
    }

    const question = await Question.findById(questionId).populate("product", "name");
    if (!question) {
      return res.status(404).json({ message: "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i." });
    }

    if (question.status === "pending") {
      question.status = "approved";
    }

    question.answers.push({ sale: saleId, answer });
    await question.save();

    // üî• T·∫°o th√¥ng b√°o cho user ƒë√£ h·ªèi c√¢u h·ªèi
    const notification = new Notification({
      user: question.user,
      message: `B·ªô ph·∫≠n QTV ƒë√£ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n cho s·∫£n ph·∫©m "${question.product.name}"`,
      link: `/product/${question.product._id}`, // ƒê∆∞a link ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
    });
    await notification.save();

    res.status(200).json({ message: "ƒê√£ tr·∫£ l·ªùi c√¢u h·ªèi.", question });
  } catch (error) {
    console.error("‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi:", error);
    res.status(500).json({ message: "L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi.", error: error.message });
  }
};


// üìå API: Sale t·ª´ ch·ªëi c√¢u h·ªèi
exports.rejectQuestion = async (req, res) => {
  try {
    const { questionId } = req.params;
    const saleId = req.body.saleId || req.user?.id;

    if (!saleId) {
      return res.status(400).json({ message: "Thi·∫øu saleId." });
    }

    const question = await Question.findById(questionId);
    if (!question) {
      return res.status(404).json({ message: "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i." });
    }

    question.status = "rejected";
    question.rejectedBy = saleId;
    await question.save();

    // üî• T·∫°o th√¥ng b√°o khi c√¢u h·ªèi b·ªã t·ª´ ch·ªëi
    const notification = new Notification({
      user: question.user,
      type: "comment",
      message: "C√¢u h·ªèi c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.",
      link: `/product/${question.product}`,
    });
    await notification.save();

    res.status(200).json({ message: "C√¢u h·ªèi ƒë√£ b·ªã t·ª´ ch·ªëi.", question });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·ª´ ch·ªëi c√¢u h·ªèi.", error: error.message });
  }
};

// üìå API: L·∫•y t·∫•t c·∫£ c√¢u h·ªèi (D√†nh cho Sale)
exports.getAllQuestions = async (req, res) => {
  try {
    const { page = 1, limit = 4, sort = "createdAt", status } = req.query;
    const pageNumber = parseInt(page);
    const pageSize = parseInt(limit);

    if (isNaN(pageNumber) || isNaN(pageSize) || pageNumber < 1 || pageSize < 1) {
      return res.status(400).json({ message: "Gi√° tr·ªã page ho·∫∑c limit kh√¥ng h·ª£p l·ªá." });
    }

    // T·∫°o query filter d·ª±a tr√™n status
    const filter = status ? { status } : {};

    const questions = await Question.find(filter)
      .sort({ createdAt: sort === "desc" ? -1 : 1 })
      .skip((pageNumber - 1) * pageSize)
      .limit(pageSize)
      .populate("user", "name email")
      .populate("product", "name images")
      .populate("answers.sale", "name email");

    const totalQuestions = await Question.countDocuments(filter);

    res.status(200).json({
      questions,
      totalQuestions,
      currentPage: pageNumber,
      totalPages: Math.ceil(totalQuestions / pageSize),
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi.", error: error.message });
  }
};

exports.removeQuestion = async (req, res) => {
  try {
    const { questionId } = req.params;

    const question = await Question.findById(questionId);
    if (!question) {
      return res.status(404).json({ message: "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i." });
    }

    question.status = "removed";
    question.isVisible = false;  // ·∫®n c√¢u h·ªèi kh·ªèi kh√°ch h√†ng
    await question.save();

    res.status(200).json({ message: "C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè.", question });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi g·ª° b·ªè c√¢u h·ªèi.", error: error.message });
  }
};
exports.editAnswer = async (req, res) => {
  try {
    const { questionId, answerId } = req.params;
    const { answer } = req.body;
    const saleId = req.user._id;

    console.log('Edit answer request:', {
      questionId,
      answerId,
      answer,
      saleId
    });

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ID
    if (!mongoose.Types.ObjectId.isValid(questionId) || !mongoose.Types.ObjectId.isValid(answerId)) {
      console.log('Invalid ID format');
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const question = await Question.findById(questionId);
    console.log('Found question:', question ? 'yes' : 'no');
    
    if (!question) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi." });
    }

    const answerToUpdate = question.answers.id(answerId);
    console.log('Found answer:', answerToUpdate ? 'yes' : 'no');
    
    if (!answerToUpdate) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi." });
    }

    console.log('Comparing sale IDs:', {
      answerSaleId: answerToUpdate.sale.toString(),
      requestSaleId: saleId.toString()
    });

    if (answerToUpdate.sale.toString() !== saleId.toString()) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a c√¢u tr·∫£ l·ªùi n√†y." });
    }

    answerToUpdate.answer = answer;
    await question.save();

    console.log('Answer updated successfully');
    res.status(200).json({ message: "C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.", question });
  } catch (error) {
    console.error('Error in editAnswer:', error);
    res.status(500).json({ 
      message: "L·ªói khi c·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi.", 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};
