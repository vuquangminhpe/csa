const payOS = require("../config/payos");
const Order = require("../models/Order");
const Cart = require("../models/Cart");
const Product = require("../models/Product");
const Notification = require("../models/Notification");
// Import h√†m updateProductStock t·ª´ OrderController
const { updateProductStock } = require('./OrderController');

exports.createPayment = async (req, res) => {
    try {
        const { totalAmount, orderId } = req.body;
        console.log("Creating payment for orderId:", orderId);

        const description = "Thanh to√°n ƒë∆°n h√†ng";

        // ƒê·∫£m b·∫£o orderId l√† s·ªë
        const orderIdNumber = parseInt(orderId);
        if (isNaN(orderIdNumber)) {
            throw new Error("OrderId ph·∫£i l√† s·ªë");
        }

        // T·∫°o payment link t·ª´ PayOS
        const paymentData = await payOS.createPaymentLink({
            orderCode: orderIdNumber, // G·ª≠i d·∫°ng s·ªë
            amount: parseInt(totalAmount), // ƒê·∫£m b·∫£o amount c≈©ng l√† s·ªë
            description: description,
            returnUrl: process.env.PAYOS_RETURN_URL,
            cancelUrl: process.env.PAYOS_CANCEL_URL
        });

        // L·∫•y orderCode t·ª´ PayOS response
        const payosOrderCode = paymentData.orderCode;
        console.log("PayOS orderCode:", payosOrderCode);

        // C·∫≠p nh·∫≠t order_code m·ªõi t·ª´ PayOS v√†o ƒë∆°n h√†ng
        await Order.findOneAndUpdate(
            { order_code: orderId.toString() },
            {
                order_code: payosOrderCode.toString(),
                transactionId: paymentData.checkoutUrl // L∆∞u URL thanh to√°n v√†o transactionId
            }
        );

        return res.status(200).json({
            paymentUrl: paymentData.checkoutUrl,
            orderCode: payosOrderCode.toString()
        });
    } catch (error) {
        console.error("L·ªói khi t·∫°o thanh to√°n:", error);
        return res.status(500).json({ message: "L·ªói khi t·∫°o thanh to√°n qua PayOS" });
    }
};


// X·ª≠ l√Ω webhook t·ª´ PayOS
exports.handleWebhook = async (req, res) => {
    console.log("Webhook ƒë∆∞·ª£c nh·∫≠n t·ª´ PayOS");
    const webhookData = payOS.verifyPaymentWebhookData(req.body);

    if (webhookData.status === "PAID") {
        console.log("Thanh to√°n th√†nh c√¥ng", webhookData);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng t·∫°i ƒë√¢y (c√≥ th·ªÉ th√™m logic l∆∞u ƒë∆°n h√†ng v√†o MongoDB)
        return res.json({
            error: -1,
            message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ webhook",
            data: null
        });
    };

    // H√†m c·∫≠p nh·∫≠t stock
    async function updateProductStock(items) {
        try {
            for (const item of items) {
                const product = await Product.findById(item.product_id);
                if (!product) {
                    throw new Error(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${item.product_id}`);
                }

                // T√¨m variant ph√π h·ª£p d·ª±a tr√™n gi√°
                const variantIndex = product.variants.findIndex(v => v.price === item.price);

                if (variantIndex === -1) {
                    throw new Error(`Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph√π h·ª£p cho s·∫£n ph·∫©m ${product.name}`);
                }

                // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
                if (product.variants[variantIndex].stock < item.quantity) {
                    throw new Error(`S·∫£n ph·∫©m ${product.name} kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho`);
                }

                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong kho
                const newStock = product.variants[variantIndex].stock - item.quantity;

                console.log("Stock update:", {
                    productName: product.name,
                    oldStock: product.variants[variantIndex].stock,
                    deduction: item.quantity,
                    newStock: newStock
                });

                // L∆∞u thay ƒë·ªïi v√†o database
                await Product.findByIdAndUpdate(
                    item.product_id,
                    {
                        $set: {
                            [`variants.${variantIndex}.stock`]: newStock
                        }
                    }
                );
            }
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t stock:", error);
            throw error;
        }
    }
}
exports.handlePayOSCallback = async (req, res) => {
    try {
        const { orderCode, status, transactionId } = req.body;
        console.log("Received callback data:", req.body);

        if (!orderCode) {
            return res.status(400).json({
                message: "Thi·∫øu m√£ ƒë∆°n h√†ng"
            });
        }

        let paymentStatus;
        let orderStatus;

        switch (status) {
            case "PAID":
                paymentStatus = "ƒê√£ thanh to√°n";
                orderStatus = "ƒê√£ x√°c nh·∫≠n";
                break;
            case "CANCELLED":
            case "FAILED":
                paymentStatus = "Thanh to√°n th·∫•t b·∫°i";
                orderStatus = "ƒê√£ h·ªßy";
                break;
            default:
                paymentStatus = "Ch·ªù thanh to√°n";
                orderStatus = "ƒêang x·ª≠ l√Ω";
        }

        // T√¨m ƒë∆°n h√†ng v√† populate items
        const order = await Order.findOne({ order_code: orderCode })
            .populate('items.product_id');

        if (!order) {
            console.log("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng:", orderCode);
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
            });
        }

        // N·∫øu thanh to√°n th√†nh c√¥ng
        if (status === "PAID") {
            try {
                // C·∫≠p nh·∫≠t stock
                await updateProductStock(order.items);
                console.log("ƒê√£ c·∫≠p nh·∫≠t stock th√†nh c√¥ng cho PayOS payment");

                // X√≥a gi·ªè h√†ng
                await Cart.findOneAndDelete({ customer_id: order.customer_id });



                // üì¢ **T·∫°o th√¥ng b√°o cho kh√°ch h√†ng Ho√†ng Gia l√†m**
                console.log("üì¢ ƒêang t·∫°o th√¥ng b√°o thanh to√°n cho kh√°ch h√†ng:", order.customer_id._id);

                const notification = new Notification({
                    user: order.customer_id._id, // ID kh√°ch h√†ng nh·∫≠n th√¥ng b√°o
                    type: "transaction",
                    message: `ƒê∆°n h√†ng ${order.order_code} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n v·ªõi s·ªë ti·ªÅn ${order.total_price.toLocaleString('vi-VN')} VNƒê qua VietQR.`,
                    link: `/order/${order._id}`,
                });
                await notification.save();
                console.log("‚úÖ Th√¥ng b√°o thanh to√°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.");
                // üì¢ **T·∫°o th√¥ng b√°o cho kh√°ch h√†ng Ho√†ng Gia l√†m**




            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng:", error);
                return res.status(500).json({
                    message: "L·ªói khi c·∫≠p nh·∫≠t stock",
                    error: error.message
                });
            }
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        order.paymentStatus = paymentStatus;
        order.status = orderStatus;
        order.transactionId = transactionId || null;
        order.updatedAt = Date.now();
        await order.save();

        return res.status(200).json({
            message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng: ${paymentStatus}`,
            order
        });

    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:", error);
        return res.status(500).json({
            message: "L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n",
            error: error.message
        });
    }
};

exports.fixFailedPaymentOrders = async (req, res) => {
    try {
        // T√¨m t·∫•t c·∫£ ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i thanh to√°n th·∫•t b·∫°i nh∆∞ng ch∆∞a ƒë∆∞·ª£c h·ªßy
        const orders = await Order.find({
            paymentStatus: 'Thanh to√°n th·∫•t b·∫°i',
            status: { $ne: 'ƒê√£ h·ªßy' }
        });

        console.log(`Found ${orders.length} orders with failed payment but not cancelled`);

        for (const order of orders) {
            console.log(`Updating order ${order._id} to cancelled status`);

            order.status = 'ƒê√£ h·ªßy';
            order.cancelReason = 'Thanh to√°n th·∫•t b·∫°i';
            order.cancelledBy = 'H·ªá th·ªëng';
            order.cancelledAt = new Date();

            await order.save();
        }

        return res.status(200).json({
            success: true,
            message: `ƒê√£ c·∫≠p nh·∫≠t ${orders.length} ƒë∆°n h√†ng c√≥ thanh to√°n th·∫•t b·∫°i th√†nh tr·∫°ng th√°i ƒë√£ h·ªßy`,
            updatedCount: orders.length
        });
    } catch (error) {
        console.error("L·ªói khi s·ª≠a tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói khi s·ª≠a tr·∫°ng th√°i ƒë∆°n h√†ng',
            error: error.message
        });
    }
};

// Th√™m h√†m m·ªõi ƒë·ªÉ l·∫•y link thanh to√°n cho ƒë∆°n h√†ng
exports.getPaymentLink = async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!orderId) {
            return res.status(400).json({ message: "Thi·∫øu m√£ ƒë∆°n h√†ng" });
        }

        // T√¨m ƒë∆°n h√†ng theo order_code
        const order = await Order.findOne({
            order_code: orderId,
            paymentMethod: "bank_transfer",
            paymentStatus: "Ch·ªù thanh to√°n"
        });

        if (!order) {
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n h√†ng kh√¥ng ph·∫£i thanh to√°n chuy·ªÉn kho·∫£n"
            });
        }

        // Ki·ªÉm tra xem c√≥ link thanh to√°n kh√¥ng
        if (!order.transactionId) {
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y link thanh to√°n cho ƒë∆°n h√†ng n√†y"
            });
        }

        return res.status(200).json({
            message: "L·∫•y link thanh to√°n th√†nh c√¥ng",
            paymentUrl: order.transactionId,
            order: {
                orderId: order.order_code,
                totalAmount: order.total_price - order.discount,
                status: order.status,
                paymentStatus: order.paymentStatus
            }
        });

    } catch (error) {
        console.error("L·ªói khi l·∫•y link thanh to√°n:", error);
        return res.status(500).json({
            message: "L·ªói h·ªá th·ªëng khi l·∫•y link thanh to√°n",
            error: error.message
        });
    }
};

