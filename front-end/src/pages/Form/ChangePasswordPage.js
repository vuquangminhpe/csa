import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "./ChangePasswordPage.css";

export default function ChangePasswordPage() {
  const navigate = useNavigate();
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    const token = localStorage.getItem("authToken");
    if (!token) {
      navigate("/login");
    }
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccessMessage("");

    // üîπ Ki·ªÉm tra nh·∫≠p li·ªáu
    if (!oldPassword || !newPassword || !confirmPassword) {
      setError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      return;
    }
    if (newPassword.length < 6) {
      setError("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }
    if (newPassword !== confirmPassword) {
      setError("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.");
      return;
    }

    try {
      const token = localStorage.getItem("authToken"); // üîπ L·∫•y token t·ª´ localStorage
      if (!token) {
        setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
        return;
      }

      // üîπ G·ª≠i API ƒë·ªïi m·∫≠t kh·∫©u
      const response = await axios.put(
        "http://localhost:9999/api/users/change-password",
        { oldPassword, newPassword },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setSuccessMessage(response.data.message);
      setOldPassword("");
      setNewPassword("");
      setConfirmPassword("");
    } catch (err) {
      console.error("L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:", err.response?.data || err.message);
      setError(err.response?.data?.message || "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };


  return (
    <div className="profile-container">
      <h2 className="change-password-title">ƒê·ªïi m·∫≠t kh·∫©u</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label className="form-label">M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
          <input
            type="password"
            className="form-control"
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
            value={oldPassword}
            onChange={(e) => setOldPassword(e.target.value)}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">M·∫≠t kh·∫©u m·ªõi</label>
          <input
            type="password"
            className="form-control"
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
          <input
            type="password"
            className="form-control"
            placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
          />
        </div>

        {/* üîπ Hi·ªÉn th·ªã th√¥ng b√°o l·ªói ho·∫∑c th√†nh c√¥ng */}
        {error && <div className="alert alert-danger">{error}</div>}
        {successMessage && <div className="alert alert-success">{successMessage}</div>}

        <button type="submit" className="change-password-btn">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u</button>
        </form>
    </div>
  );
}
